#!/bin/bash
#
# Configures a webfront instance after boot-up

set -x
set -e

rootDir=/var/www
USER=djaoapp
OWNER=ec2-user
INSTALL_PACKAGES=/usr/bin/dnf

# Install necessary public packages to bootstrap configuration
if [ "$(grep "Amazon Linux release 2 " /etc/system-release)" != "" ]; then
    INSTALL_PACKAGES=/usr/bin/yum
    # We need to insure SELinux is enabled which is not the case
    # with the default AmazonLinux2 images.
    if [ "$(sestatus)" =~ .*disabled ] ; then
        /usr/bin/yum install selinux-policy selinux-policy-targeted policycoreutils-python
        sed -i 's/SELINUX=\(\w\w*\)/SELINUX=enforcing/g' /etc/selinux/config
        sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 selinux=1 security=selinux"/' /etc/default/grub
        /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
        touch /.autorelabel
        # XXX we will need to reboot with the `reboot` command.
    fi
    # We have to enable the EPEL repo to install podofo.
    if [ ! -f /etc/yum.repos.d/epel.repo ]; then
        amazon-linux-extras install epel -y
    fi
    [ -e /usr/lib64/python2.7/site-packages/selinux ] || $INSTALL_PACKAGES -y install libselinux-python
fi
if [ "$(grep "CentOS" /etc/system-release)" != "" ]; then
    OWNER=centos
    INSTALL_PACKAGES=/usr/bin/yum
    if [ ! -f /usr/bin/python3 ]; then
        if [ ! -f /etc/yum.repos.d/epel.repo ]; then
            /usr/bin/yum -y install epel-release
        fi
    fi
    # Without making the fast cache, python36 is sometimes not found on mirror
    # (ex: mirrors.cat.pdx.edu)
    /usr/bin/yum makecache fast
    /usr/bin/yum -y install python36 python36-libs python36-devel python36-pip python-boto3
    [ -e /usr/lib64/python2.7/site-packages/selinux ] || $INSTALL_PACKAGES -y install libselinux-python
fi

[ -f /usr/bin/aws ] || $INSTALL_PACKAGES -y install awscli
[ -f /usr/bin/bzip2 ] || $INSTALL_PACKAGES -y install bzip2
[ -f /usr/bin/git ] || $INSTALL_PACKAGES -y install git-core
[ -f /usr/bin/make ] || $INSTALL_PACKAGES -y install make
[ -f /usr/bin/rsync ] || $INSTALL_PACKAGES -y install rsync
[ -f /usr/sbin/semanage ] || $INSTALL_PACKAGES -y install policycoreutils-python-utils

# update required ownership
[ $(/usr/bin/getent group $USER) ] || /usr/sbin/groupadd --gid 1001 $USER
[ $(/usr/bin/getent passwd $USER) ] || /usr/sbin/useradd --no-create-home --uid 1001 --gid 1001 $USER

# download keys, certificates, etc.
{% if identities_url %}
/usr/bin/aws s3 cp {{identities_url}} / --recursive
{% endif %}

# recreates links for TLS certificates
for domain in `ls /etc/pki/tls/certs/archive` ; do
  chmod 600 /etc/pki/tls/certs/archive/$domain/privkey.pem
  mkdir -p /etc/pki/tls/certs/live/$domain
  pushd /etc/pki/tls/certs/live/$domain
  [ -e privkey.pem ] || ln -s ../../archive/$domain/privkey.pem
  [ -e fullchain.pem ] || ln -s ../../archive/$domain/fullchain.pem
done
for domain in `ls /etc/letsencrypt/archive` ; do
  chmod 600 /etc/letsencrypt/archive/$domain/privkey.pem
  mkdir -p /etc/letsencrypt/live/$domain
  pushd /etc/letsencrypt/live/$domain
  [ -e privkey.pem ] || ln -s ../../archive/$domain/privkey1.pem privkey.pem
  [ -e fullchain.pem ] || ln -s ../../archive/$domain/fullchain1.pem fullchain.pem
  [ -e cert.pem ] || ln -s ../../archive/$domain/cert1.pem cert.pem
  [ -e chain.pem ] || ln -s ../../archive/$domain/chain1.pem chain.pem
done

# defaults to downloading drop so we can install the instance profiles.
siteTop=/usr/local
VIRTUALENV_RUN="/usr/bin/python3 -m venv --system-site-packages"
if [ ! -f ${siteTop}/bin/dservices ]; then
    /usr/bin/mkdir -p ${siteTop}/reps
    $VIRTUALENV_RUN ${siteTop}
    echo "installTop=${siteTop}" > ${siteTop}/dws.mk
    /usr/bin/git clone {{remote_drop_repo}} ${siteTop}/reps/drop
    pushd ${siteTop}/reps/drop/src
    ${siteTop}/bin/python3 -m pip install --upgrade pip
    ${siteTop}/bin/pip install -r ../requirements.txt
    ${siteTop}/bin/pip install .
    popd
    # Insures dcopylogs can upload the logs to S3
    setsebool -P nis_enabled 1
fi

cd $siteTop
{% if profiles %}
${siteTop}/bin/dservices -DetcDir=/etc{% if logs_storage_location %} -DlogsLocation={{logs_storage_location}}{% endif %}{% if ldap_host %} -DldapHost={{ldap_host}}{% endif %}{% if company_domain %} -DcompanyDomain={{company_domain}}{% endif %}{% if domain_name %} -DdomainName={{domain_name}}{% endif %}{% for profile in profiles %} reps/drop/share/profiles/${profile}.xml{% endfor %}
{% endif %}


# Installs packages that were downloaded from the identity URL.
cd $rootDir
packages=$(ls "*.tar.gz *.tar.bz2" 2>/dev/null || true)
# defaults to downloading drop so we can install the instance profiles.
if [ "X$packages" != "X" ] ; then
    for package in ${packages} ; do
        dirname=${package%%.*}
        installTop="$rootDir/$dirname"
        [[ $package == *.tar.gz ]] && /usr/bin/tar zxf $package
        [[ $package == *.tar.bz2 ]] && /usr/bin/tar jxf $package
        /usr/bin/chown -R ${OWNER}:${OWNER} "$dirname"
    done
fi

if [ -e $rootDir/profiles ] ; then
    while read -r profile
    do
        dirname=$(basename ${profile})
        installTop="$rootDir/${dirname%%.*}"
        if [ ! -f ${installTop}/bin/activate ]; then
            mkdir -p ${installTop}
            chown ${OWNER}:${OWNER} ${installTop}
            sudo -u ${OWNER} $VIRTUALENV_RUN ${installTop}
            # Updating pip because version 22.0. does not generate version
            # numbers correctly when doing `pip install .`
            # in a source directory.
            sudo -u ${OWNER} ${installTop}/bin/pip install pip -U
            # Installing `wheel` will help install packages with Python bindinds
            # without recompiling from source.
            sudo -u ${OWNER} ${installTop}/bin/pip install wheel
        fi
        sudo -u ${OWNER} /usr/local/bin/dws build ${profile}
    done < "$rootDir/profiles"
fi

# Finish configuration of the local install for the djagent service
siteTop="$rootDir/djaoapp"
if [ -d ${siteTop}/reps/djagent ]; then
    /usr/bin/chmod 600 ${siteTop}/etc/sysconfig/djagent
    /usr/bin/cp ${siteTop}/etc/systemd/system/djagent.service /usr/lib/systemd/system
    /usr/bin/systemctl enable djagent
    /usr/bin/systemctl restart djagent.service
fi

# Finish configuration of the local install for the djaoapp service
if [ -d ${siteTop}/reps/djaoapp ]; then
    /usr/bin/mkdir -p /var/log/gunicorn /var/run/djaoapp
    /usr/bin/mkdir -p ${siteTop}/reps/djaoapp/htdocs/themes ${siteTop}/reps/djaoapp/themes ${siteTop}/reps/djaoapp/.cache
    /usr/bin/chmod 600 ${siteTop}/etc/sysconfig/djaoapp
    # We make sure the .pid file can be created by gunicorn and systemd
    # service can load.
    /usr/bin/chown ${USER}:${USER} ${siteTop}/etc/sysconfig/djaoapp /var/run/djaoapp /var/log/gunicorn
    # Insures we can upload themes
    /usr/bin/chown ${USER}:${USER} ${siteTop}/reps/djaoapp/htdocs/themes ${siteTop}/reps/djaoapp/themes ${siteTop}/reps/djaoapp/.cache
    # and that nginx can access the static assets
    /usr/sbin/semanage fcontext -a -t 'httpd_sys_rw_content_t' "${siteTop}/reps/djaoapp/htdocs(.*)"
    /usr/sbin/restorecon -rvF ${siteTop}/reps/djaoapp

    # move the database where the config files have been configured with.
    if [ -f ${siteTop}/reps/djaoapp/db.sqlite ]; then
        /usr/bin/mv ${siteTop}/reps/djaoapp/db.sqlite ${siteTop}/var/db/djaodjin.sqlite
    fi
    /usr/bin/cp ${siteTop}/etc/systemd/system/djaoapp.service /usr/lib/systemd/system
    /usr/bin/systemctl enable djaoapp
    /usr/bin/systemctl restart djaoapp.service
fi

# cron notifications
alternatives --set mta /usr/sbin/sendmail.ssmtp

# restart services whose configuration has been altered
/usr/bin/systemctl force-reload systemd-journald

# We are expecting that a nginx server can respond to HTTP requests
# by that point...
