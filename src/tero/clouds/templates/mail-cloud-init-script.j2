#!/bin/bash
#
# Configures a mail instance after initial boot-up

set -x
set -e

siteTop=/usr/local
OWNER=ec2-user
INSTALL_PACKAGES=/usr/bin/dnf

# Install necessary public packages to bootstrap configuration
if [ "$(grep "Amazon Linux release 2 " /etc/system-release)" != "" ]; then
    INSTALL_PACKAGES=/usr/bin/yum
    # We need to insure SELinux is enabled which is not the case
    # with the default AmazonLinux2 images.
    if [ "$(sestatus)" =~ .*disabled ] ; then
        /usr/bin/yum install selinux-policy selinux-policy-targeted policycoreutils-python
        sed -i 's/SELINUX=\(\w\w*\)/SELINUX=enforcing/g' /etc/selinux/config
        sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 selinux=1 security=selinux"/' /etc/default/grub
        /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
        touch /.autorelabel
        # XXX we will need to reboot with the `reboot` command.
    fi
    # We have to enable the EPEL repo to install podofo.
    if [ ! -f /etc/yum.repos.d/epel.repo ]; then
        amazon-linux-extras install epel -y
    fi
    [ -e /usr/lib64/python2.7/site-packages/selinux ] || $INSTALL_PACKAGES -y install libselinux-python
fi
if [ "$(grep "CentOS" /etc/system-release)" != "" ]; then
    OWNER=centos
    INSTALL_PACKAGES=/usr/bin/yum
    if [ ! -f /usr/bin/python3 ]; then
        if [ ! -f /etc/yum.repos.d/epel.repo ]; then
            /usr/bin/yum -y install epel-release
        fi
    fi
    # Without making the fast cache, python36 is sometimes not found on mirror
    # (ex: mirrors.cat.pdx.edu)
    /usr/bin/yum makecache fast
    /usr/bin/yum -y install python36 python36-libs python36-devel python36-pip python-boto3
    [ -e /usr/lib64/python2.7/site-packages/selinux ] || $INSTALL_PACKAGES -y install libselinux-python
fi

[ -f /usr/bin/aws ] || $INSTALL_PACKAGES -y install awscli
[ -f /usr/bin/bzip2 ] || $INSTALL_PACKAGES -y install bzip2
[ -f /usr/bin/git ] || $INSTALL_PACKAGES -y install git-core
[ -f /usr/bin/make ] || $INSTALL_PACKAGES -y install make
[ -f /usr/bin/rsync ] || $INSTALL_PACKAGES -y install rsync

# download keys, certificates, etc.
{% if identities_url %}
/usr/bin/aws s3 cp {{identities_url}} / --recursive
{% endif %}


# recreates links for TLS certificates
for domain in `ls /etc/pki/tls/certs/archive` ; do
  chmod 600 /etc/pki/tls/certs/archive/$domain/privkey.pem
  mkdir -p /etc/pki/tls/certs/live/$domain
  pushd /etc/pki/tls/certs/live/$domain
  [ -e privkey.pem ] || ln -s ../../archive/$domain/privkey.pem
  [ -e fullchain.pem ] || ln -s ../../archive/$domain/fullchain.pem
done
for domain in `ls /etc/letsencrypt/archive` ; do
  chmod 600 /etc/letsencrypt/archive/$domain/privkey.pem
  mkdir -p /etc/letsencrypt/live/$domain
  pushd /etc/letsencrypt/live/$domain
  [ -e privkey.pem ] || ln -s ../../archive/$domain/privkey1.pem privkey.pem
  [ -e fullchain.pem ] || ln -s ../../archive/$domain/fullchain1.pem fullchain.pem
  [ -e cert.pem ] || ln -s ../../archive/$domain/cert1.pem cert.pem
  [ -e chain.pem ] || ln -s ../../archive/$domain/chain1.pem chain.pem
done


# defaults to downloading drop so we can install the instance profiles.
VIRTUALENV_RUN="/usr/bin/python3 -m venv --system-site-packages"
if [ ! -f ${siteTop}/bin/dservices ]; then
    /usr/bin/mkdir -p ${siteTop}/reps
    $VIRTUALENV_RUN ${siteTop}
    echo "installTop=${siteTop}" > ${siteTop}/dws.mk
    /usr/bin/git clone {{remote_drop_repo}} ${siteTop}/reps/drop
    pushd ${siteTop}/reps/drop/src
    ${siteTop}/bin/python3 -m pip install --upgrade pip
    ${siteTop}/bin/pip install -r ../requirements.txt
    ${siteTop}/bin/pip install .
    popd
    # Insures dcopylogs can upload the logs to S3
    setsebool -P nis_enabled 1
fi

cd ${siteTop}
LDAP_HASHED_PASSWORD='{{ldap_hashed_password}}'
{% if profiles %}
${siteTop}/bin/dservices -DetcDir=/etc -DlogsLocation={{logs_storage_location}} -DldapPasswordHash="$LDAP_HASHED_PASSWORD"{% if ldap_host %} -DldapHost={{ldap_host}}{% endif %}{% if company_domain %} -DcompanyDomain={{company_domain}}{% endif %}{% if domain_name %} -DdomainName={{domain_name}}{% endif %}{% for profile in profiles %} reps/drop/share/profiles/{{profile}}.xml{% endfor %}
{% endif %}

# disable what we don't need
if [ "$(grep "Amazon Linux release 2023" /etc/system-release)" != "" ]; then
    /usr/bin/systemctl stop rpcbind
    /usr/bin/systemctl disable rpcbind
fi
