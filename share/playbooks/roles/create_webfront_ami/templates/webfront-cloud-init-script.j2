#!/bin/bash
#
# configure a stock CentOS or Fedora to serve as a session manager proxy.

set -x
set -e

rootDir=/var/www

# Install necessary public packages to bootstrap configuration
VIRTUALENV_RUN="/usr/bin/virtualenv -p python3 --system-site-packages"
if [ -f /usr/bin/dnf ]; then
    /usr/bin/dnf -y install awscli make python-virtualenv
else
    /usr/bin/yum -y install epel-release
    # Without making the fast cache, python36 is sometimes not found on mirror
    # (ex: mirrors.cat.pdx.edu)
    /usr/bin/yum makecache fast
    /usr/bin/yum -y install libselinux-python
    /usr/bin/yum -y install python36 python36-libs python36-devel python36-pip
    /usr/bin/yum -y install awscli bzip2 make python-virtualenv python-boto3
    VIRTUALENV_RUN="/usr/bin/virtualenv -p python3.6 --system-site-packages"
fi

# Download and install packages that require authentication credentials
/usr/bin/aws s3 cp s3://{{deployutils_bucket}}/identities/ami-web.ec2.internal / --recursive

[ $(/usr/bin/getent group djaoapp) ] || /usr/sbin/groupadd --gid 1001 djaoapp
[ $(/usr/bin/getent passwd djaoapp) ] || /usr/sbin/useradd --no-create-home --uid 1001 --gid 1001 djaoapp

cd $rootDir
shopt -s nullglob
packages=$(echo "*.tar.gz *.tar.bz2")
if [ "X$packages" != "X" ] ; then
    for package in ${packages} ; do
        dirname=${package%%.*}
        siteTop="$rootDir/$dirname"
        [[ $package == *.tar.gz ]] && /usr/bin/tar zxf $package
        [[ $package == *.tar.bz2 ]] && /usr/bin/tar jxf $package
        [ -f ${siteTop}/bin/activate ] || $VIRTUALENV_RUN ${siteTop}
        echo "installTop=$siteTop" > $dirname/dws.mk
        echo "srcTop=$siteTop/reps" >> $dirname/dws.mk
        echo "remoteIndex=$siteTop/./reps/djaoapp.git/djaoapp.xml" >> $dirname/dws.mk
        pushd $siteTop/reps/drop
        /usr/bin/make install
        cd $siteTop/reps/$dirname
        ../../bin/dws --default make recurse
        ../../bin/dws --default make install
        popd
        /usr/bin/chown -R ${USER}:${USER} "$dirname"
        rm ${package}
    done
else
    # defaults to downloading drop so we can install the webfront.xml profile.
    siteTop="$rootDir"
    /usr/bin/mkdir -p ${siteTop}/reps
    $VIRTUALENV_RUN ${siteTop}
    /usr/bin/git clone {{remote_drop_repo}} ${siteTop}/reps/drop
fi

cd $siteTop
bin/python reps/drop/src/dservices.py -DetcDir=/etc -DldapHost=ldaps.{{tag_prefix}}ec2.internal -DcompanyDomain={{company_domain}} -DdomainName={{domain_name}} reps/drop/share/profiles/webfront.xml

# Extra configuation to start up djagent and djaoapp
siteTop=${rootDir}/djaoapp
if [ -d ${siteTop} ] ; then
    # Install dcopylogs into /usr/local/bin
    mv ${siteTop}/dws.mk ${siteTop}/dws.disable
    cd ${siteTop}/reps/drop
    make install installTop=/usr/local PYTHON=python
    mv ${siteTop}/dws.disable ${siteTop}/dws.mk
    # Insures dcopylogs can upload the logs to S3
    setsebool -P nis_enabled 1
    # Install djagent
    cd ${siteTop}/reps/djagent
    ../../bin/dws --default make install
    echo "SETTINGS_LOCATION=" > ${siteTop}/etc/sysconfig/djagent
    echo "SETTINGS_CRYPT_KEY=" >> ${siteTop}/etc/sysconfig/djagent
    echo "QUEUE_URL=" >> ${siteTop}/etc/sysconfig/djagent
    /usr/bin/chmod 600 ${siteTop}/etc/sysconfig/djagent
    /usr/bin/chown djaoapp:djaoapp ${siteTop}/etc/sysconfig/djagent
    /usr/bin/cp ${siteTop}/etc/systemd/system/djagent.service /usr/lib/systemd/system
    ../../bin/dws --default make install-selinux

    # Configure djaoapp
    echo "SETTINGS_LOCATION=" > ${siteTop}/etc/sysconfig/djaoapp
    echo "SETTINGS_CRYPT_KEY=" >> ${siteTop}/etc/sysconfig/djaoapp
    /usr/bin/chmod 600 ${siteTop}/etc/sysconfig/djaoapp
    # We make sure the .pid file can be created by gunicorn and systemd
    # service can load.
    /usr/bin/chown djaoapp:djaoapp ${siteTop}/etc/sysconfig/djaoapp ${siteTop}/var/run
    /usr/bin/mkdir -p /var/log/gunicorn
    /usr/bin/chown djaoapp:djaoapp /var/log/gunicorn
    /usr/bin/rm -rf ${siteTop}/var/log/gunicorn
    pushd ${siteTop}/var/log
    /usr/bin/ln -s /var/log/gunicorn
    popd
    # Insures we can upload themes
    /usr/bin/mkdir -p ${siteTop}/reps/djaoapp/themes ${siteTop}/reps/djaoapp/.cache
    /usr/bin/chown djaoapp:djaoapp ${siteTop}/reps/djaoapp/htdocs ${siteTop}/reps/djaoapp/themes ${siteTop}/reps/djaoapp/.cache
    # and that nginx can access the static assets
    /usr/sbin/semanage fcontext -a -t 'httpd_sys_rw_content_t' '${siteTop}/reps/djaoapp/htdocs(.*)'
    /usr/sbin/restorecon -rvF ${siteTop}/reps/djaoapp

    /usr/bin/cp ${siteTop}/etc/systemd/system/djaoapp.service /usr/lib/systemd/system
    # We make an initial sqlite3 database so the server renders a page
    # instead of a 500 error when the AMI just booted with no configuration.
    cd ${siteTop}/reps/djaoapp
    ../../bin/python manage.py migrate --run-syncdb

    # Rewrite nginx config file to avoid redirects loops because no https
    /usr/bin/cat << EOF >> /etc/nginx/conf.d/proxy_djaoapp.conf
    upstream proxy_djaoapp {
        server  127.0.0.1:8000;
    }
EOF
    /usr/bin/cat << EOF >> /etc/nginx/conf.d/djaoapp.com.conf
    server {
        listen       80;
        listen       [::]:80;
        server_name  {{domain_name}};

        root         /var/www/djaoapp/reps/djaoapp/htdocs;

        location / {
            try_files \$uri/index.html \$uri.html \$uri @forward_to_djaoapp;
        }

        location @forward_to_djaoapp {
            proxy_pass    http://proxy_djaoapp;
            include       /etc/nginx/proxy_params;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
EOF

    /usr/bin/cp /usr/share/nginx/html/404.html /usr/share/nginx/html/50x.html ${siteTop}/reps/djaoapp/htdocs
    /usr/sbin/restorecon -rvF  ${siteTop}/reps/djaoapp/htdocs
    /usr/bin/systemctl enable djagent
    /usr/bin/systemctl enable djaoapp
    /usr/bin/systemctl start djagent
    /usr/bin/systemctl start djaoapp
fi

# disable what we don't need
/usr/bin/systemctl stop rpcbind
/usr/bin/systemctl disable rpcbind
/usr/bin/systemctl stop postfix.service
/usr/bin/systemctl disable postfix.service

# Ansible will be waiting for this server to respond
# before it continues with registering the AMI.
/usr/bin/systemctl restart nginx
